#!/bin/sh
#
# generate ASCII output of the RPKI
# Job Snijders <job@openbsd.org>
# November 2020

set -e

PJOBS=16

export LC_ALL=C

if [[ $# -eq 0 ]] ; then
    echo 'must specify output directory'
    exit 1
fi

rm -rf $1/ mapping.txt tal-mapping.txt
mkdir $1/
cp rpki_console.gif $1/

# try some sharding
for i in 0 1 2 3 4 5 6 7 8 9 A B C D E F; do
	for j in 0 1 2 3 4 5 6 7 8 9 A B C D E F; do
		mkdir $1/${i}${j}; done; done

RUN=$(/usr/bin/time rpki-client -vjco 2>&1 >/dev/zero)

# deal with tals
for i in /etc/rpki/*.tal; do
	TA=$(test-cert -vt $(test-tal -v $i | grep 'URI: rsync' | awk -F// '{ print "/var/cache/rpki-client/" $2 }' ) $i | sed 's/OK//')
	SIA=$(echo "${TA}" | fgrep -m1 'Subject key identifier:' | sed 's/.*: //' | tr '[:lower:]' '[:upper:]')
	MFT=$(echo "${TA}" | fgrep -m1 'Manifest:' | awk -F// '{ print $2 }')
	echo "<a href=\"./$SIA.html\">$SIA</a> $i" >> tal-mapping.txt
cat << EOF > $1/${SIA%${SIA#??}}/${SIA}.html
<a href="./roas.html"><img border=0 src="rpki_console.gif" /></a>
<pre>
<strong>RPKI Root Certificate</strong>
Locator: $i

${TA}

$(openssl x509 -text -inform DER -in $(test-tal -v $i | grep 'URI: rsync' | awk -F// '{ print "/var/cache/rpki-client/" $2 }'))
</pre>
<i>Generated on $(date) by <a href="https://www.rpki-client.org/">rpki-client</a>.</i>
EOF
echo -n T
done

cat << EOF > $1/index.html
<img src="rpki_console.gif" />
<pre>
$(cat tal-mapping.txt | sort -k2)

$(date)
${RUN}
</pre>
Download the RPKI VRPs in <a href="./vrps.csv">csv</a> or <a href="./vrps.json">json</a> format.<br />
Generated by <a href="https://www.rpki-client.org/">rpki-client</a>.
EOF

cp /var/db/rpki-client/csv $1/vrps.csv
cp /var/db/rpki-client/json $1/vrps.json

cat << EOF > $1/roas.html
<a href="./"><img border=0 src="rpki_console.gif" /></a>
<style>
td {
  border-bottom: 1px solid grey;
}
</style>
<table>
<tr>
<th>SIA</th>
<th style="width: 20%;">asID</th>
<th>Prefixes</th>
</tr>
EOF

# roas
cd /var/cache/rpki-client/
for i in $(find * -type f -name '*.roa' -print); do
	if test "$(jobs | wc -l)" -ge $PJOBS; then
		wait
	fi
	{
	ROA=$(test-roa -v ${i} | sed 's/OK//')
	SIA=$(echo "${ROA}" | fgrep -m1 'Subject key identifier:' | sed 's/.*: //' | tr '[:lower:]' '[:upper:]')
	AKI=$(echo "${ROA}" | fgrep -m1 'Authority key identifier:' | sed 's/.*: //')
	ASID=$(echo "${ROA}" | fgrep -m1 'asID:' | awk '{ print $NF }')
	echo "$SIA $(sha256 -qb $i) $(basename $i) $i" >> $1/../mapping.txt
	cat << EOF >> $1/roas.html
<tr>
<td valign="top"><pre><a href="./${SIA}.html">${SIA}</a></pre></td>
<td valign="top" style="text-align:center;"><pre>AS: ${ASID}</pre></td>
<td>
<pre>
$(echo "${ROA}" | fgrep 'max: ')
</pre>
</td>
</tr>
EOF
	cat << EOF | sed "s|${AKI}|<a href=\"./${AKI}.html\">${AKI}\</a\>|" > $1/${SIA%${SIA#??}}/${SIA}.html
<img src="rpki_console.gif" />
<pre>
<strong>Route Origin Authorization</strong>
Location: <strong>${i}</strong>

${ROA}

$(test-roa -p ${i} | openssl x509 -text)
</pre>

<i>Generated on $(date) by <a href="https://www.rpki-client.org/">rpki-client</a>.</i>
EOF
echo -n R
} &
done

# manifests 
cd /var/cache/rpki-client/
for i in $(find * -type f -name '*.mft' -print); do
	if test "$(jobs | wc -l)" -ge $PJOBS; then
		wait
	fi
	{
	MFT=$(test-mft -v ${i} | sed 's/OK//')
	SIA=$(echo "${MFT}" | fgrep -m1 'Subject key identifier:' | sed 's/.*: //' | tr '[:lower:]' '[:upper:]')
	AKI=$(echo "${MFT}" | fgrep -m1 'Authority key identifier:' | sed 's/.*: //')
	echo "$SIA $(sha256 -qb $i) $(basename $i) $i" >> $1/../mapping.txt
	cat << EOF | sed "s|${AKI}|<a href=\"./${AKI}.html\">${AKI}\</a\>|" > $1/${SIA%${SIA#??}}/${SIA}.html
<img src="rpki_console.gif" />
<pre>
<strong>RPKI Manifest</strong>
Location: <strong>${i}</strong>

${MFT}

$(test-mft -p ${i} | openssl x509 -text)
</pre>

<i>Generated on $(date) by <a href="https://www.rpki-client.org/">rpki-client</a>.</i>
EOF
echo -n M
} &
done
wait

# certificates
cd /var/cache/rpki-client/
for i in $(find * -type f -name '*.cer' -print); do
	if test "$(jobs | wc -l)" -ge $PJOBS; then
		wait
	fi
	{
	CERT=$(test-cert -v ${i} 2>/dev/zero | sed 's/OK//')
	if [ "$CERT" = "" ]; then
		echo -n .
	else
		SIA=$(echo "${CERT}" | fgrep -m1 'Subject key identifier:' | sed 's/.*: //' | tr '[:lower:]' '[:upper:]')
		AKI=$(echo "${CERT}" | fgrep -m1 'Authority key identifier:' | sed 's/.*: //')
		echo "$SIA $(sha256 -qb $i) $(basename $i) $i" >> $1/../mapping.txt
		cat << EOF | sed "s|${AKI}|<a href=\"./${AKI}.html\">${AKI}\</a\>|" > $1/${SIA%${SIA#??}}/${SIA}.html
<img src="rpki_console.gif" />
<pre>
<strong>RPKI Certificate</strong>
Location: <strong>${i}</strong>

${CERT}

$(openssl x509 -text -inform DER -in ${i})
</pre>

<i>Generated on $(date) by <a href="https://www.rpki-client.org/">rpki-client</a>.</i>
EOF
		echo -n C
	fi
	} &
done
wait

# link all keywords
cd $1/
for SIAFILE in $(find . -name "*.html" -print); do
	if test "$(jobs | wc -l)" -ge $PJOBS; then
		wait
	fi
	{
	for LINK in $(egrep '[[:space:]]hash |URI:rsync://' ${SIAFILE} | fgrep -v '.crl' | awk '{ print $NF }' | sed 's/URI:rsync:\/\///'); do
		fgrep " $LINK" ../mapping.txt | while IFS=' ' read -r MSIA MHASH MRFP MLFP; do
			perl -p -i -e "s|\Q$MHASH\E|\<a href=\"./${MSIA}.html\">$MHASH\</a\>|;" \
				-e "s|\Q: $MRFP\E|: \<a href=\"./${MSIA}.html\">$MRFP\</a\>|;" \
				-e "s|\Qrsync://$MLFP\E|rsync://<a href=\"./${MSIA}.html\">$MLFP\</a\>|" ${SIAFILE}
		done
	done
	echo -n L
} &
done
wait
echo
find . -name "*.html" -print | xargs -J % mv % .
find . -type d ! -path . | xargs rmdir
